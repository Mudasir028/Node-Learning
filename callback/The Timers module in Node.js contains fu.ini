The Timers module in Node.js contains functions that execute code after a set period of time.
Timers do not need to be imported via require()
To fully understand when timer functions will be executed, it's a good idea to read up on the Node.js Event Loop.
Controlling the Time Continuum (  تسلسل ) with Node.js
The Node.js API provides several ways of scheduling code to execute at some point after the present moment.
setTimeout() can be used to schedule code execution after a designated amount of milliseconds. This function is similar to window.setTimeout() from the browser JavaScript API, however a string of code cannot be passed to be executed.
setTimeout() accepts a function to execute as its first argument and the millisecond delay defined as a number as the second argument. Additional arguments may also be included and these will be passed on to the function. Here is an example of that:

function myFunc(arg) {
  console.log(`arg was => ${arg}`);
}

setTimeout(myFunc, 1500, 'funky');


The timeout interval that is set cannot be relied upon to execute after that exact number of milliseconds. This is because other executing code that blocks or holds onto the event loop will push the execution of the timeout back. The only guarantee is that the timeout will not execute sooner than the declared timeout interval.

setImmediate() will execute code at the end of the current event loop cycle. T



The Node.Js Event loop, Timers, and process .nestTick():

What is evant loop?
the event Loop is what allow Node.js to perfrom non-blocking I/O operations -- dispite the fact that javascript is single threaded- by offloading operations to the system  kernel whenever possible.

modren karnel multi- threaded han, ya multipal operation  handel kratay hana or inha backgroun ma execute krtay han.
jab koi ak operation makamal hoata ha to karnel node ko btata ha. ta ka manasab callback ko poll queue ma add kia ja skay. ta ka bila aakhir amil ma laya ja sakay.

explaination:
when node.js start, it initilizes the event loop, processes the provided input script.
which may makes async API Call, schedule timers, or call process.nestTicks(),
n begins processing the event loop.




